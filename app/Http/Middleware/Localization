https://stackoverflow.com/questions/29279977/laravel-5-multilanguage-support/

https://medium.com/@Oriechinedu/laravel-localization-made-simple-8ee4a34731e7

https://stackoverflow.com/a/39384200/5180888

https://laracasts.com/discuss/channels/tips/example-on-how-to-use-multiple-locales-in-your-laravel-5-website
==============================================================================================

Some time ago I was struggling like you with the given tutorial. After researching/searching I ended up like this. Please note I am still working on it.

Step 1: Add your locales 
In config/app.php add skip_locals line below locales

'locales' => ['en' => 'English', 'sv' => 'Swedish'],

'skip_locales' => ['admin','auth','etc'],


Step 2: Prefix your routes
change the map method to the following
To prefix our routes, we change the map method in app/Providers/RouteServiceProvider.php. Change the map method to the following:
<?php 

public function map(Router $router, Request $request)
{
    $locale = $request->segment(1);
    $this->app->setLocale($locale);
    $skipLocales = $this->app->config->get('app.skip_locales');  

    // If the locale is added to skip_locales array continue without locale
    if (in_array($locale, $skipLocales)) {
        $router->group(['namespace' => $this->namespace], function($router)
        {
            require app_path('Http/routes.php');
        });
    }
    else {
        $router->group(['namespace' => $this->namespace, 'prefix' => $locale], function($router) {
            require app_path('Http/routes.php');
        });
    }
}
Step 3: Create a language middleware
Change the contents with this one

<?php namespace App\Http\Middleware;

use Closure;
use Illuminate\Routing\Redirector;
use Illuminate\Http\Request;
use Illuminate\Foundation\Application;
use Illuminate\Contracts\Routing\Middleware;

class Language implements Middleware
{

    public function __construct(Application $app, Redirector $redirector, Request $request)
    {
        $this->app = $app;
        $this->redirector = $redirector;
        $this->request = $request;
    }

    /**
     * Handle an incoming request.
     *
     * @param \Illuminate\Http\Request $request            
     * @param \Closure $next            
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        // Make sure the current local exists
        $locale = $request->segment(1);

        // If the locale is added to to skip_locales array continue without locale
        if (in_array($locale, $this->app->config->get('app.skip_locales'))) {
            return $next($request);
        } else {
            // If the locale does not exist in the locales array continue with the fallback_locale
            if (! array_key_exists($locale, $this->app->config->get('app.locales'))) {
                $segments = $request->segments();
                array_unshift($segments, $this->app->config->get('app.fallback_locale'));
                // $segments[0] = $this->app->config->get('app.fallback_locale');
                return $this->redirector->to(implode('/', $segments));
            }
        }
        $this->app->setLocale($locale);

        return $next($request);
    }

}
Hope this will help!